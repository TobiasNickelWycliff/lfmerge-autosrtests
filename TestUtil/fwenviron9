#!/bin/sh

# Environment settings for running FieldWorks
#
# Source this file in a shell and then run "mono FieldWorks.exe -app {Te,Flex}"

# Possible values for RUNMODE:
# - INSTALLED: when running an installed package
# - PACKAGING: while building the package

BASE=$(realpath $(pwd)/..)
COM=$(dirname "${BASE}")/libcom/COM
ARCH=$(uname -m)
OUTPUTBASE=$(pwd)
OUTPUT=${OUTPUTBASE}/Output_$(uname -m)
[ -z "$BUILD" ] && BUILD=Debug
[ -z "$MONO_PREFIX" ] && MONO_PREFIX=/opt/mono4-sil
[ -z "$MONO_SILPKGDIR" ] && MONO_SILPKGDIR=/opt/mono4-sil
MONO_ENVIRON=${OUTPUTBASE}/fwenviron

# Dependency locations
# search for xulrunner and geckofx, select the best, and add its location to LD_LIBRARY_PATH
if [ -d "${OUTPUT}/${BUILD}/Firefox-Linux64" ]; then
	GECKOFX="${OUTPUT}/${BUILD}"
	XULRUNNER="${GECKOFX}/Firefox-Linux64"
	LD_PRELOAD=${XULRUNNER}/libgeckofix.so
fi

GDK_SHARP=/usr/lib/cli/gdk-sharp-2.0/
ENC_CONVERTERS=/usr/lib/fieldworks

MONO_RUNTIME=v4.0.30319
MONO_DEBUG=explicit-null-checks
MONO_ENV_OPTIONS="-O=-gshared"

# Directory settings
PATH="${MONO_SILPKGDIR}/bin:${OUTPUT}/${BUILD}:${BASE}/Lib/src/icu/install${ARCH}/bin:${BASE}/Lib/src/icu/source/bin:${COM}/build${ARCH}/bin:${PATH}"
LD_LIBRARY_PATH="${MONO_SILPKGDIR}/lib:${ENC_CONVERTERS}:${OUTPUT}/${BUILD}:${BASE}/Lib/src/icu/install${ARCH}/lib:${COM}/build${ARCH}/lib:${XULRUNNER}:${LD_LIBRARY_PATH}"
# ensure we scan the default pkg-config directories (to pick up Geckofx for compiling)
[ -z "$PKG_CONFIG_PATH" ] && PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig

# Add packaged mono items to paths
PKG_CONFIG_PATH="${MONO_SILPKGDIR}/lib/pkgconfig:/usr/lib/fieldworks/lib/pkgconfig:${PKG_CONFIG_PATH}"
MONO_GAC_PREFIX="${MONO_SILPKGDIR}:${ENC_CONVERTERS}:/usr:${MONO_PREFIX}"

# Set registry entries
export HOME=${OUTPUTBASE}
mkdir -p ${OUTPUTBASE}/.mono/registry/CurrentUser/software/sil/fieldworks/9
cat > ${OUTPUTBASE}/.mono/registry/CurrentUser/software/sil/fieldworks/9/values.xml <<EOF
<values>
<value name="RootCodeDir"
type="string">${OUTPUTBASE}/DistFiles</value>
<value name="RootDataDir"
type="string">${OUTPUTBASE}/DistFiles</value>
<value name="ProjectsDir"
type="string">${OUTPUTBASE}/DistFiles/Projects</value>
</values>
EOF
mkdir -p ${OUTPUTBASE}/DistFiles/Projects

COMPONENTS_MAP_PATH="${OUTPUT}/${BUILD}"
FW_ROOT="${OUTPUTBASE}/DistFiles"
FW_ROOTDATA="${OUTPUTBASE}/DistFiles"
FW_ROOTCODE="${OUTPUTBASE}/DistFiles"
ICU_DATA="${OUTPUTBASE}/DistFiles/Icu54"
MONO_REGISTRY_PATH="${OUTPUT}/registry"

FW_CommonAppData=${OUTPUT}/VarLibFieldworks
[ ! -d $FW_CommonAppData ] && mkdir -p $FW_CommonAppData
[ -d /var/lib/fieldworks/registry ] && cp -r /var/lib/fieldworks/registry $FW_CommonAppData

MONO_PATH="${OUTPUTBASE}/DistFiles:${OUTPUT}/${BUILD}:${GDK_SHARP}:${ENC_CONVERTERS}:${GECKOFX}"
MONO_TRACE_LISTENER="Console.Out"
MONO_MWF_SCALING=disable

# If the standard installation directory for FLExBridge exists, and the environment
# variable is not yet set, set the environment variable for finding FLExBridge.
# (Setting the LocalMachine registry value at installation doesn't work for Linux.)

if [ -z "$FLEXBRIDGEDIR" ]; then
	if [ -d "/usr/lib/flexbridge" ]; then
		FLEXBRIDGEDIR="/usr/lib/flexbridge"
	elif [ -d "${OUTPUT}/flexbridge" ]; then
		FLEXBRIDGEDIR="${OUTPUT}/flexbridge"
	fi
fi

export \
	PATH LD_LIBRARY_PATH PKG_CONFIG_PATH LD_PRELOAD \
	COMPONENTS_MAP_PATH \
	FW_ROOT FW_ROOTCODE FW_ROOTDATA \
	ICU_DATA \
	FLEXBRIDGEDIR \
	MONO_PATH MONO_REGISTRY_PATH \
	MONO_PREFIX MONO_GAC_PREFIX \
	MONO_RUNTIME MONO_DEBUG MONO_ENV_OPTIONS \
	MONO_TRACE_LISTENER MONO_IOMAP MONO_MWF_SCALING FW_CommonAppData

#DEBUG_ENABLE_PTR_VALIDATION

# prevent Gecko from printing scary message about "double free or corruption" on shutdown
# (See FWNX-1216.)  Tom Hindle suggested this hack as a stopgap.
MALLOC_CHECK_=0; export MALLOC_CHECK_

#sets keyboard input method to none
unset XMODIFIERS
